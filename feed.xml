<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BytesApart</title>
    <description>A programmer's candid learning experience</description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Selecting a Blogging Platform - Part II</title>
        <description>&lt;p&gt;It’s been more than a year since my last blog post. Work commitments and balancing academic progress in my Masters in &lt;a href=&quot;https://wqu.org/&quot;&gt;Quantitative Finance&lt;/a&gt;, unfortunately, ate up all my spare time, leading me to push learning new technologies and posting on my blog onto the backseat. As my academic session comes to a close, I happen to have freed up that time slot for doing regular blog posts with fixed time frames and working on a side-projects concerning what I love doing the most, that is, teaching!&lt;/p&gt;

&lt;p&gt;That said, this post is a continuation of the &lt;a href=&quot;https://www.bytesapart.com/selecting-a-blogging-platform/&quot;&gt;first part&lt;/a&gt;, where I describe what led me to choose Jekyll as a blogging platform. This post pertains mostly to the technical aspects of buying some off-the-shelf component, modifying it to one’s liking and the challenges one faces in doing so.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-jekyll-system&quot;&gt;&lt;strong&gt;The Jekyll System&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;div class=&quot;media image&quot; data-animation=&quot;fadeInUp&quot;&gt;

	
		&lt;img src=&quot;/images/selecting-a-blogging-platform-part-ii/the_jekyll_structure-selecting_a_blogging_platform_ii.jpeg&quot; alt=&quot;Jekyll Structure&quot; /&gt;
	

	
		&lt;div class=&quot;caption&quot; data-animation=&quot;fadeInUp&quot;&gt;

		  
		  	&lt;h4&gt;Jekyll Structure&lt;/h4&gt;
		  

		  
		  	&lt;p&gt;Understanding Jekyll's file structure&lt;/p&gt;
		  

		  

		&lt;/div&gt;
	

&lt;/div&gt;

&lt;p&gt;At this point, I wasn’t familiar with any of the cool, new stuff coming out from Javascript. For me, this ‘template’ style programming was completely new. Nonetheless, since Jekyll seemed to be the most convenient option that I had, I decided to dive straight into it.&lt;/p&gt;

&lt;p&gt;The best place to start off learning anything new is to check out the documentation. If it is a well-established source, it’ll surely contain some form of ‘Hello-World’ program. Jekyll’s website seems to have substantial documentation which was super newbie friendly. I started with the &lt;a href=&quot;https://jekyllrb.com/docs/&quot;&gt;quickstart&lt;/a&gt; guide, which consisted of a  couple of reasonably straightforward commands, after the installation of &lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;Ruby&lt;/a&gt;. At first, I was confused seeing two Ruby stable versions on the download page. I ended up with the lesser of the two keeping in mind that my theme was fairly old, so the more bleeding edge version of Ruby, the more likely I’ll have troubles setting the Jekyll blog up. I ended up following the instructions through and spinning up a default blog. To my surprise, the blog looked good in its minimal glory. To add to it, I was taken aback on how simple it was to get started, unlike WordPress where one needed to setup XAMPP or get a custom third-party software to spin up an instance.&lt;/p&gt;

&lt;p&gt;The following is a simple Jekyll structure, when you initialise an empty directory, with the assumption of following the quickstart guide on Jekyll’s website.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;plaintext&quot;&gt;
myblog
  |- _posts
  |- _site
  |- .gitignore
  |- _config.yml
  |- 404.html
  |- about.md
  |- GemFile
  |- Gemfile.lock
  |- index.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the possibility of what these files/folders meant made me feel lost. From my experiences, I’ve known to learn basics quickly from video tutorials and then get to the tricky part with the help of the documentation. I searched YouTube and found this great tutorial by &lt;a href=&quot;https://www.youtube.com/watch?v=T1itpPvFWHI&amp;amp;list=PLLAZ4kZ9dFpOPV5C5Ay0pHaa0RJFhcmcB&quot;&gt;GiraffeAcademy&lt;/a&gt;, which worked wonders.&lt;/p&gt;

&lt;p&gt;Let’s start with the “_posts” folder, which, as the name suggests, is the folder where all the posts reside. If you do notice from the sample, the posts are all written in “.md” format, or &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;MarkDown&lt;/a&gt;. The “_site” folder consists of the rendered site when you run a ‘Jekyll serve’ command. I won’t be going in-depth about the basics of Jekyll since there are ample tutorials out there describing what liquid templating, front matter and the various other esoteric terms are. Instead, I’ll be focusing on my thought-process of taking an off-the-shelf theme and customizing it to my liking.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;fixing-a-broken-theme&quot;&gt;&lt;strong&gt;Fixing A Broken Theme&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;div class=&quot;media image&quot; data-animation=&quot;fadeInUp&quot;&gt;

	
		&lt;img src=&quot;/images/selecting-a-blogging-platform-part-ii/a_broken_theme-selecting_a_blogging_platform_ii.jpg&quot; alt=&quot;A Broken Theme&quot; /&gt;
	

	
		&lt;div class=&quot;caption&quot; data-animation=&quot;fadeInUp&quot;&gt;

		  
		  	&lt;h4&gt;A Broken Theme&lt;/h4&gt;
		  

		  
		  	&lt;p&gt;Repairing off-the-shelf theme&lt;/p&gt;
		  

		  

		&lt;/div&gt;
	

&lt;/div&gt;

&lt;p&gt;The theme upon “Jekyll Serving”, seemed to work fine in Mozilla Firefox. Every theme is expected to run straight out-of-the-box when purchased since you are paying a premium for it. Unfortunately, I knew something had to be amiss since this theme’s inception was during the initial years of Jekyll’s popularity. Upon checking cross-browser compatibility, I found out that the theme broke on Google Chrome, which, led me to spiral down several fixes and customisations to an otherwise very satisfying theme.&lt;/p&gt;

&lt;p&gt;My experience with cross-browser compatibility always stated that it’s undoubtedly some Javascript that is messing up the images from rendering. After some hacking around, I seem to have found the culprit. Under the “_include” folder (the folder that contains snippings that are stitched together at runtime to render one’s page) consisted of a footer.html, for including all Javascript which the page uses. To my surprise, it contained the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;

&amp;lt;script src=&quot;{{ '/assets/jquery-2.1.1....&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;{{ '/assets/viewportchecker.js...&quot;&amp;gt;&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that’s a problem, which, would only mean that I have a blog which would NEVER update jquery and it’s corresponding libraries. Plus, since this would be a disk read, it would be slower than a CDN. Time to change all these links to refer to a CDN rather than local files!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;

&amp;lt;script src=&quot;https://code.jquery.com/...&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/...&quot;&amp;gt;&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thankfully, that ended up repairing the theme, and I did not have to do much hacking within viewport.js to get things running for chrome. However, this got me interested in googling more and making the theme more to my liking.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;a-new-navigation-system&quot;&gt;&lt;strong&gt;A New Navigation System&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;div class=&quot;media image&quot; data-animation=&quot;fadeInUp&quot;&gt;

	
		&lt;img src=&quot;/images/selecting-a-blogging-platform-part-ii/a_new_navigation_system-selecting_a_blogging_platform_ii.jpg&quot; alt=&quot;Changing the Navigation&quot; /&gt;
	

	
		&lt;div class=&quot;caption&quot; data-animation=&quot;fadeInUp&quot;&gt;

		  
		  	&lt;h4&gt;Changing the Navigation&lt;/h4&gt;
		  

		  
		  	&lt;p&gt;Adding a search instead of a menu&lt;/p&gt;
		  

		  

		&lt;/div&gt;
	

&lt;/div&gt;

&lt;p&gt;Out of the box, the navigation menu seemed to be lovely and workable, but not designed for a blog, because a blog would have several posts, and in the end, it would pollute the Menu making it bloated, and this had to change. I pondered hard on what could be the best solution for acing this problem, and in the end, thought that a search-style navigation would be the best fit. A lot of what one wants to go through is available on the home screen, but if the volume increases exponentially and someone needs to go to an article that she or he remembers vaguely, can utilise the search bar, which meant that the search had to be pristine.&lt;/p&gt;

&lt;p&gt;After searching for quite some time, I came across &lt;a href=&quot;https://community.algolia.com/jekyll-algolia/&quot;&gt;Algolia&lt;/a&gt; and &lt;a href=&quot;https://learn.cloudcannon.com/jekyll/jekyll-search-using-lunr-js/&quot;&gt;Lunr.js&lt;/a&gt;. The former is how I wanted my search to be, that is, asynchronous. However, this does limit me to the number of indexing operations per month, but they happen to have amicable plans for anything open-source. I intended my blog to be under CC 1.0 and have a reasonably liberal license, which would not be a hindrance in the rare chance that my blog blows up. To integrate Jekyll with Algolia, I had to modify the “_config.yml” file to include Algolia’s gems.&lt;/p&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/languages/yaml.min.js&quot;&gt;&lt;/script&gt;

&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;
# Gems
plugins:
  - jekyll-paginate
  - jekyll-feed
  - jekyll-algolia

# algolia
algolia:
  application_id: DDFRKSHRJD
  index_name:     bytesapart
  search_only_api_key: c68086dcf7e5c2f0a8b334dcd77252e9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the generation of the Algolia’s ApplicationID and Search API Key, one needs to register at &lt;a href=&quot;https://www.algolia.com/&quot;&gt;Algolia&lt;/a&gt;. Post that; there is some indexing that needs completion on one’s Jekyll blog, by executing the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;plaintext&quot;&gt;ALGOLIA_API_KEY='your_admin_api_key' bundle exec jekyll algolia&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algolia’s &lt;a href=&quot;https://community.algolia.com/jekyll-algolia/getting-started.html&quot;&gt;Documentation&lt;/a&gt; does an excellent job in showcasing how one can integrate Algolia with Jekyll.&lt;/p&gt;

&lt;p&gt;The Algolia integration also meant that the frontend needed some changes, which is by changing the styling slightly to expand the white background of the Menu and inject a search bar within that space, and inclusion of Algolia’s instantsearch.js within the search menu.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;
&amp;lt;!-- Algolia --&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/npm/instantsearch.js@3.0.0/dist/instantsearch.min.css&quot;&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/npm/instantsearch.js@2.10.4/dist/instantsearch-theme-algolia.min.css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;few-minor-tweaks&quot;&gt;&lt;strong&gt;Few Minor Tweaks&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;div class=&quot;media image&quot; data-animation=&quot;fadeInUp&quot;&gt;

	
		&lt;img src=&quot;/images/selecting-a-blogging-platform-part-ii/minor_tweaks-selecting_a_blogging_platform_ii.jpg&quot; alt=&quot;Tweaking styles&quot; /&gt;
	

	
		&lt;div class=&quot;caption&quot; data-animation=&quot;fadeInUp&quot;&gt;

		  
		  	&lt;h4&gt;Tweaking styles&lt;/h4&gt;
		  

		  
		  	&lt;p&gt;Adding and editing some css and js&lt;/p&gt;
		  

		  

		&lt;/div&gt;
	

&lt;/div&gt;

&lt;p&gt;I intended to use &lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;animate.css&lt;/a&gt; for all animations (with a little over the top ones), which also meant that I need to load the entire page first and then display it; otherwise, a quick scroll ruins the animation. Therefore, I had to opt for a page-loader, and here, I did not want to use a GIF. A quick google leads me to this &lt;a href=&quot;https://codepen.io/danielmorosan/pen/XmYBVx&quot;&gt;codepen&lt;/a&gt; page. I did change it slightly to my liking but used it overall as-is.&lt;/p&gt;

&lt;p&gt;For all the code snippets, I prefer using &lt;a href=&quot;https://github.com/tonsky/FiraCode&quot;&gt;Fira Code&lt;/a&gt; as my font, since that is what I use in my IDE, along with a Dark Theme. The theme did come with a good code snipping highlighting tool, though I prefer using highlight.js since it has a plethora of syntax highlighting for many languages.&lt;/p&gt;

&lt;p&gt;Also, I needed something where I could host this Jekyll site, and make the builds automated, rather than building it manually and deploying to some old-school CPanel based server. My options were &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; and &lt;a href=&quot;https://about.gitlab.com/product/pages/&quot;&gt;GitLab Pages&lt;/a&gt; out of which, at the time of when I was bringing up this blog, GitHub did not offer a custom gem build (which is odd, since Jekyll is a brainchild of GitHub). I ended up going with GitLab Pages, since the instructions were crystal clear, and that there was the support of custom gems which this theme has, and I may need some in the future. All this meant setting up a “.gitlab-ci.yml” file for trigging the Continous Integration build.&lt;/p&gt;

&lt;pre&gt;&lt;code language=&quot;yaml&quot;&gt;
pages:
  stage: deploy
  script:
  - gem install jekyll
  - bundle exec jekyll build -d public
  artifacts:
    paths:
    - public
  only:
  - master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There were also some other minor tweaks such as changing the path to the images folder to have a subfolder per post rather than treat the “images” folder as a dumping ground, and the addition of a 404.html page, rather than let the default GitLab Pages handle it. Some other changes involved adjusting some small margins, the addition of a horizontal line at the beginning of every section, and complete transparency of post images on hover. Overall these tweaks were minor and subtly changed the aesthetics but add to the overall ambience of the blog.&lt;/p&gt;

&lt;p&gt;In conclusion of the series, I believe choosing Jekyll was a right choice since getting up-and-running with it seemed very simple and did not feel as bloated as WordPress, even though the later is known the territory. A few changes were necessary to make the blog suite my needs, but those tweaks did not mean heading into convoluted PHP and hitting one’s head against the wall dealing with WordPress’s convoluted structure. Even though these first two posts are not something that offers much depth into programming or on diving deep into the changes, I do tend to take this blog in a more depth-first approach for future posts. Let’s say I needed to pull out of web-dev and needed some posts to get out in the time I thought about the direction of taking this blog.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Nov 2018 00:12:05 +0000</pubDate>
        <link>/selecting-a-blogging-platform-part-ii/</link>
        <guid isPermaLink="true">/selecting-a-blogging-platform-part-ii/</guid>
      </item>
    
      <item>
        <title>Selecting a Blogging Platform</title>
        <description>&lt;p&gt;For the past year, in my spare time, I’ve always tried to start a blog that would end up being a detailed repository of whatever
I’ve learnt or whatever I’ll be learning. The most challenging part of this happens to be selecting a blogging platform that gives
you the flexibility to edit, and offers a good user experience to those that visit the website.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-checklist&quot;&gt;&lt;strong&gt;The Checklist&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;div class=&quot;media image&quot; data-animation=&quot;fadeInUp&quot;&gt;

	
		&lt;img src=&quot;/images/selecting-a-blogging-platform/checklist-selecting_a_blogging_platform.jpg&quot; alt=&quot;Checklist&quot; /&gt;
	

	
		&lt;div class=&quot;caption&quot; data-animation=&quot;fadeInUp&quot;&gt;

		  
		  	&lt;h4&gt;Checklist&lt;/h4&gt;
		  

		  
		  	&lt;p&gt;A checklist of desired features helped in narrowing down the hunt&lt;/p&gt;
		  

		  

		&lt;/div&gt;
	

&lt;/div&gt;

&lt;p&gt;Out of the plethora of blogging platforms available, I needed something which satisfied certain criteria. This ‘checklist’ acted like
a filter which helped me narrow down to my solution. I did not treat this list as a hardcoded requirement that I must adhere to, but
something that adds points towards what I desire from the platform. The list happens to be&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Must be customisable:&lt;/strong&gt; This was something of a priority. As a programmer, I needed a hackable medium which I could get into any time and tweak
if I didn’t like a particular feature, or if I wanted to add a new feature.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; A good documentation to assist with the intricacies of the API was necessary. Without good documentation, one ends up spending
more initial effort in understanding the way things assembled and how they work, which leads to less blogging and more web development, at which I
happened not to be good.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Available Themes:&lt;/strong&gt; The previous point and this one are somewhat connected. In order to save time in doing more stuff, rather than being a part anytime
web developer, I needed a blogging framework that not only had support for custom themes, but there was also a community at large that was involved in building
custom themes, be it paid or free (as in free beer). That would allow me to use the base theme, read the documentation and customise accordingly.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lightweight, easily hostable:&lt;/strong&gt; I needed the platform to be lightweight, which means that it didn’t bog me down with unnecessary features which I’ll probably
never end up using, but sound perfect on paper. Another desirable attribute was the ability to host the blog easily, which need not be inherently in-built within
the blogging framework, but custom Docker images which would make life easier were always welcome.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-wordpress-addiction&quot;&gt;&lt;strong&gt;The Wordpress Addiction&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;div class=&quot;media image&quot; data-animation=&quot;fadeInUp&quot;&gt;

	
		&lt;img src=&quot;/images/selecting-a-blogging-platform/wordpress-selecting_a_blogging_platform.jpg&quot; alt=&quot;Wordpress&quot; /&gt;
	

	
		&lt;div class=&quot;caption&quot; data-animation=&quot;fadeInUp&quot;&gt;

		  
		  	&lt;h4&gt;Wordpress&lt;/h4&gt;
		  

		  
		  	&lt;p&gt;The undisputed king&lt;/p&gt;
		  

		  

		&lt;/div&gt;
	

&lt;/div&gt;

&lt;p&gt;Wordpress happened to be an almost natural choice, given the fact that while I was in university, I used to make a ton of
Wordpress websites for clients, which involved integrating WooCommerce, Visual Composer and other famous plugins for added functionality.
Wordpress happens to be this batteries-included, all-inclusive powerhouse. Its customisability is far ahead of all other blogging platforms.
Since WordPress happens to be one of the oldest CMS (Content Management System) out there, one can find a plugin for almost anything.
Which means that this was both customisable and that it had extensive documentation that led to a thriving community. A larger community in turn
indicated more themes available on a variety of marketplaces.&lt;/p&gt;

&lt;p&gt;The only glaring problem was that it required a server to host, which could have been done with the help of shared hosting or with a cloud server, through
the server route always seemed more pleasant to go, since you get all the control at the cost of additional maintenance charges. There are some excellent guides
on how to host a Wordpress website on a cloud service, such as the one by &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lamp-on-ubuntu-16-04&quot;&gt;DigitalOcean&lt;/a&gt;.
One thing which I wasn’t very fond of when it came to Wordpress was the fact that I needed a Database that will contain all my posts and all the security loopholes that come along with Databases. When you want something that is minimalistic, databases are a big no-no.&lt;/p&gt;

&lt;p&gt;Blog themes tend to be geared more towards magazine publications, or towards multi-user theme oriented blogs. I was neither. Luckily, I had a great theme lying around,
called &lt;a href=&quot;https://themeforest.net/item/astro-responsive-wordpress-blog-theme/7128412&quot;&gt;Astro&lt;/a&gt;. It had the exact minimal look which I desired, so I quickly fired it up on
a &lt;a href=&quot;https://www.vultr.com/&quot;&gt;Vultr&lt;/a&gt;  VPS (Virtual Private Server). To get things useful in WordPress, there are a ton of plugins that one needs to install, such as &lt;a href=&quot;https://jetpack.com/&quot;&gt;Jetpack&lt;/a&gt;, &lt;a href=&quot;https://yoast.com/wordpress/plugins/seo/&quot;&gt;Yoast SEO&lt;/a&gt;, &lt;a href=&quot;https://wordpress.org/plugins/wordfence/&quot;&gt;Wordfence&lt;/a&gt;, etc, which adds to the already massive installation consisting of a
database making it feels clunky already.&lt;/p&gt;

&lt;p&gt;The user-friendly approach always gets to me, because of the emphasis on visual design and the use of shortcodes for achieving small things. I’m the kind of person
that feels at home in a text editor, rather than some WYSIWYG web-based editor with an added text option. As much as the customizer is helpful in getting a live
preview of what changes you make, I always felt restricted by it. I could potentially get inside the functions.php file and the like and edit to my heart’s content,
which I did end up doing for a couple of days, only to realise that this isn’t as easy to hack quickly at, like plain old HTML. After wasting a week or so become a part-time
Wordpress developer, I knew there has to be some other way. Portability from &lt;a href=&quot;https://www.vultr.com/&quot;&gt;Vultr&lt;/a&gt; to &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt; was also something
that I had kept in mind, therefore, setting up &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; along with &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker Compose&lt;/a&gt; took some time (I don’t happen to be an Infra guy, but can get my head around it provided I put time into it). Not-so-easy-and-slow modifications, a Database with security issues, multiple plugins to get it up and running along with
hosting costs which I could never recover since it was meant to be more of a personal project, suggested that I had to keep Wordpress as Plan-B and search for some other platform out there.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;fishing-with-pelican&quot;&gt;&lt;strong&gt;Fishing with Pelican&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;div class=&quot;media image&quot; data-animation=&quot;fadeInUp&quot;&gt;

	
		&lt;img src=&quot;/images/selecting-a-blogging-platform/fishing-with-pelican-selecting_a_blogging_platform.jpg&quot; alt=&quot;Pelican&quot; /&gt;
	

	
		&lt;div class=&quot;caption&quot; data-animation=&quot;fadeInUp&quot;&gt;

		  
		  	&lt;h4&gt;Pelican&lt;/h4&gt;
		  

		  
		  	&lt;p&gt;A pythonic static generator&lt;/p&gt;
		  

		  

		&lt;/div&gt;
	

&lt;/div&gt;

&lt;p&gt;My forte happens to be the Python programming language. Even though I boast about being a polyglot, there are only a couple of languages that I know
of very well due to ages of practising. My full-time Job also happens to be heavy on Python, so it was only natural that I searched for a platform
that used python. &lt;a href=&quot;https://blog.getpelican.com/&quot;&gt;Pelican&lt;/a&gt; happens to be a perfect fit for this. It’s a static site generator, which means that
we have gotten rid of the Database, removing any security issues that come with Databases, along with removing a Framework, such as Wordpress, which
has it’s own &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=wordpress&quot;&gt;CVE&lt;/a&gt; issues.&lt;/p&gt;

&lt;p&gt;A static site generator happens to sit somewhere in between plain text and HTML. Every blog has reusable content. If I were writing my blog in plain
HTML, this would mean copying and pasting large chunks of HTML code over for each post, and changing only the content part of it for every page.
Static site generators help you to write your blog in Markdown (something which is next to plain text) and compile the content which you have
written along with the HTML to generate pages on the fly. This way, your final user is consuming plain HTML, while you could potentially employ a
CI (Continuous Integration) to keep building your site on every code commit to a particular Version Control Software’s branch, which works amazingly well,
as the HTML can be cooked up by a single person, with a little bit of template code specific to every static site generator.&lt;/p&gt;

&lt;p&gt;Pelican, a static site generator, had the above pluses. Adding to that, it had a sizeable community and used Jinja Templating, which was somewhat
in familiar territory, and it’s written in python. Which meant the installation would be more comfortable and if things go south, and that there would be fewer chances of
me shying out to dive deeper into the code to fix the problem, rather than finding an alternate around it. The only problem that I had with Pelican was
that it didn’t have good templates. The theming community seemed not to be interested in releasing commercial themes which could be purchased but have
a higher degree of quality over their open-source parts. There was this one particular theme which I liked, called as &lt;a href=&quot;https://github.com/arulrajnet/attila/&quot;&gt;Attila&lt;/a&gt;,
which happened to be a port of a Ghost Theme (Lightweight Wordpress, in my opinion).&lt;/p&gt;

&lt;p&gt;I did like the theme, but I didn’t love it. After spending some time with Pelican trying to learn and modify the theme, I realised that I’d have to do a ton
of web development to give it the quality I require and not make it feel like a generic off-the-shelf theme. That again proved to be hectic due to the time constraint which I had, though I got to learn a lot about static site generators from there. What killed my decision to use Pelican and for that matter
even &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; was the fact that there were themes, some outstanding ones too, but none that fit my taste, and none with that premium feel to it, which I
could potentially purchase if I felt like it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dr-jekyll&quot;&gt;&lt;strong&gt;Dr. Jekyll&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;

&lt;div class=&quot;media image&quot; data-animation=&quot;fadeInUp&quot;&gt;

	
		&lt;img src=&quot;/images/selecting-a-blogging-platform/jekyll_logo-selecting_a_blogging_platform.png&quot; alt=&quot;Jekyll&quot; /&gt;
	

	
		&lt;div class=&quot;caption&quot; data-animation=&quot;fadeInUp&quot;&gt;

		  
		  	&lt;h4&gt;Jekyll&lt;/h4&gt;
		  

		  
		  	&lt;p&gt;Static site generation behemoth.&lt;br /&gt;Image Credits: &lt;strong&gt;&lt;a href=&quot;https://github.com/jekyll/brand&quot; style=&quot;color: #eb2344;text-decoration: none;&quot;&gt;Jekyll Brand&lt;/a&gt;.&lt;/strong&gt;&lt;br /&gt; Image License: &lt;strong&gt;&lt;a href=&quot;https://github.com/jekyll/brand/blob/master/LICENSE&quot; style=&quot;color: #eb2344;text-decoration: none;&quot;&gt;CC-BY-4.0&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
		  

		  

		&lt;/div&gt;
	

&lt;/div&gt;

&lt;p&gt;After picking up Pelican for some time, I looked into other Static Site Generators, though not from a coding or API perspective. I looked at them from a ‘Users’ perspective to decide whether
the criteria of premium themes was fitting perfectly. Out of all the generators, Jekyll stood out. Jekyll seemed to be one of the oldest generators out there, with a thriving
community, loads of tutorials for it, along with a bunch of premium themes, along with free ones that had a premium feel to it. Two themes that caught my attention were
&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt; and &lt;a href=&quot;https://themeforest.net/item/hashtag-for-jekyll-an-elegant-blog-theme/7721454&quot;&gt;Hashtag&lt;/a&gt;. I loved them both. The former was free of cost, while the latter being premium. I came across the former theme through a &lt;a href=&quot;https://mtlynch.io/why-i-quit-google/&quot;&gt;blog post&lt;/a&gt; which went viral on Reddit.
The premium theme was somewhat old and had not been updated, breaking on chrome. I did like it’s out-of-the-box animations and colour schemes while maintaining a minimalistic look.
Either way, I had to modify both the themes to a degree to my liking. I decided to go with the premium theme even though it had browser compatibility as I wouldn’t have to deal
with much JQuery/Javascript, something which I was trying to avoid actively. The free theme was loaded with SEO options and optimised very, very well because of which delayed my decision to go with the premium theme.&lt;/p&gt;

&lt;p&gt;Jekyll gave me all the perks which were available in other generators, with the added benefit of being stable due to its age and the fact that it had extensive step-by-step documentation, along with the fact that there was an option of premium themes which looked good. In the end, I hacked away a little bit at both the themes, only to realise that the premium one had some decent SEO related modifications. I decided to stick with the premium one. In my next blog post, I’ll cover what adjustments went into the theme, and the frustration of returning to the world of web development after a very long time.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Apr 2018 00:12:05 +0000</pubDate>
        <link>/selecting-a-blogging-platform/</link>
        <guid isPermaLink="true">/selecting-a-blogging-platform/</guid>
      </item>
    
  </channel>
</rss>